!pip install unsloth
!pip install "unsloth @ git+https://github.com/unslothai/unsloth.git"
!pip install --no-deps "xformers==0.0.27" trl peft accelerate bitsandbytes

from unsloth import FastLanguageModel
import torch

max_seq_length = 2048
dtype = None
load_in_4bit = False

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "microsoft/Phi-3.5-mini-instruct",
    max_seq_length = max_seq_length,
    dtype = torch.bfloat16,
    device_map = {"": torch.cuda.current_device()}
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 8,
    target_modules = ["q_proj", "k_proj","v_proj", "o_proj", "gate_proj","up_proj","down_proj"],
    lora_alpha = 32,
    lora_dropout = 0.05,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = True,
    loftq_config = None,
)

from unsloth.chat_templates import get_chat_template
tokenizer = get_chat_template(
    tokenizer,
    chat_template = "phi-3",
    mapping = {
        "role": "from",
        "content": "value",
        "user": "human",
        "assistant": "gpt"
    
    }
)

def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize = False, add_generation_prompt = False) for convo in convos]
    return { "text" : texts, }
pass

from datasets import load_dataset
dataset = load_dataset("json", data_files="converted_train_merged.jsonl", split="train")
dataset = dataset.map(formatting_prompts_func, batched=True,)

unsloth_template = """
{{ bos_token }}
You are a medical assistant answering multiple choice questions.\n
{% for message in messages %}
    {% if message['from'] == 'human' %}
        {{ '### Question:\n' + message['value'] + '\n' }}
    {% else %}
        {{ '### Answer: ' + message['value'] + eos_token + '\n' }}
    {% endif %}
{% endfor %}
"""
unsloth_eos_token = "eos_token"

if False:
    tokenizer = get_chat_template(
    tokenizer,
    chat_template = unsloth_template,
    eos_token = unsloth_eos_token,
    mapping = {
        "role": "from",
        "content": "value",
        "user": "human",
        "assistant": "gpt"
    },
    map_eos_token = True
    )

from transformers import DataCollatorWithPadding

data_collator = DataCollatorWithPadding(
    tokenizer=tokenizer,
    pad_to_multiple_of=8  # better GPU performance
)

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.

    args = TrainingArguments(
    per_device_train_batch_size = 4,
    gradient_accumulation_steps = 4,
    num_train_epochs = 1,
    warmup_ratio = 0.1,
    learning_rate = 1.5e-4,
    lr_scheduler_type = "cosine",
    fp16 = not is_bfloat16_supported(),
    bf16 = is_bfloat16_supported(),
    logging_steps = 10,
    optim = "adamw_8bit",
    weight_decay = 0.01,
    output_dir = "outputs",
    seed = 3407,
    save_steps = 1000,
    save_total_limit = 1,  # Optional: only keep last 2 checkpoints to save disk space
    dataloader_num_workers = 4,  # âœ… This is the correct place
    dataloader_pin_memory = True,

)
)

trainer_stats = trainer.train()

model.save_pretrained("lora_model_trainedfor6hrs") # Local saving
tokenizer.save_pretrained("lora_model_trainedfor6hrs")
# model.push_to_hub("your_name/lora_model", token = "...") # Online saving
# tokenizer.push_to_hub("your_name/lora_model", token = "...") # Online saving


